{\rtf1\ansi\ansicpg1254\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;
\red163\green21\blue21;\red43\green131\blue159;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c100000;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0;
\csgenericrgb\c63900\c8200\c8200;\csgenericrgb\c16900\c51200\c62500;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 Cstructures Documentation:\
\
1. Quick Start Quide\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\
\
1.  Quick Start Guide: \
\
Before including headers you should define qnodes ,snodes and lnodes members with macro functions because every function and node created respect to your settings.\
\
Quick definition Guide:\
\
for defining a string called name in Queue nodes you can use following syntax before including header.\
maximum of 5 arbitrary members can be included to these nodes. most node setters named with QNODE[ node_number ]TYPE or  QNODE[ node_number ]NAME\
\
\
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f1\fs22 \cf2 \cb3 #define QNODE0TYPE char*\cf4 \
\cf2 #define QNODE0NAME name
\f0\fs24 \cf0 \cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 Sets  member for Queue nodes.\
\
\
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f1\fs22 \cf2 \cb3 #define SNODE3TYPE int\cf4 \
\cf2 #define SNODE3NAME number
\f0\fs24 \cf0 \cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 Sets  member for Stacks nodes.\
\
\
\
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f1\fs22 \cf2 \cb3 #define LNODE3TYPE char*\cf4 \
\cf2 #define LNODE3NAME text
\f0\fs24 \cf0 \cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 Sets  member for List nodes.\
\
\
Now you are ready for including headers: \
\
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f1\fs22 \cf2 \cb3 #include \cf5 "queue.h"\cf4 \
\cf2 #include \cf5 "stack.h"\cf4 \
\cf2 #include \cf5 "linkedlist.h"
\f0\fs24 \cf0 \cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\
\
after setting structures node member you can simply initalize a Queue, Stack or List object. \
Warn that queueinit() function returns pointer to Queue :\
\
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f1\fs22 \cf6 \cb3 Queue\cf4  *its_first_queue = \cf6 queueinit\cf4 ();\
\cf6 Stack\cf4  *its_first_stack = \cf6 stackinit\cf4 ();\
\cf6 List\cf4  *its_first_list = \cf6 listinit\cf4 ();
\f0\fs24 \cf0 \cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\
\
after initialize your you can add  new nodes to these objects:\
\
\
\
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f1\fs22 \cf4 \cb3     \cf6 enqueue\cf4 (its_first_queue, \cf5 "hello im added"\cf4 );\
    \cf6 printf\cf4 (\cf5 "queues first nodes index is %d and element of node is \\" %s\\"\\n"\cf4  , its_first_queue->\cf6 head\cf4 ->\cf6 index\cf4 , its_first_queue->\cf6 head\cf4 ->\cf6 name\cf4 );\
\
Enqueue functions adds new to to queue respect to queue datastructure's rules. also you can access queues elements by [QUEUENAME]->head->[YOUR VARIABLE NAME]\
Also each qnode elements contains nextPtr so you can traverse around each individual node with [QUEUENAME]->head->nextPtr->[YOUR VARIABLE NAME]\
Each nodes contains index number also using them may be useful for your code.\
\
    \
    \cf6 push\cf4 (its_first_stack, 10);\
    \cf6 printf\cf4 (\cf5 "stacks first nodes index is %d and element of node is \\"%d\\" \\n"\cf4  , its_first_stack->\cf6 top\cf4 ->\cf6 index\cf4 ,its_first_stack->\cf6 top\cf4 ->\cf6 number\cf4 );\
    \
\
push functions adds new to to stack respect to stack datastructure's rules. also you can access queues elements by [STACKNAME]->top->[YOUR VARIABLE NAME]\
Also each snode elements contains nextPtr so you can traverse around each individual node with [STACKNAME]->top->nextPtr->[YOUR VARIABLE NAME]\
Each nodes contains index number also using them may be useful for your code.\
\
\
\
\
\
    \cf6 append\cf4 (its_first_list, \cf5 "im lists first element"\cf4 );\
    \cf6 printf\cf4 (\cf5 "List first nodes index is %d and element of node  first node is \\" %s\\" \\n "\cf4  , its_first_list->\cf6 root\cf4 ->\cf6 index\cf4 ,its_first_list->\cf6 root\cf4 ->\cf6 text\cf4 );\
    \
    \cf6 insert\cf4 (its_first_list, 0, \cf5 "im going to be first node"\cf4 );\
    \cf6 printf\cf4 (\cf5 "List first nodes index is %d and element of node  first node is \\" %s \\" \\n "\cf4  , its_first_list->\cf6 root\cf4 ->\cf6 index\cf4 ,its_first_list->\cf6 root\cf4 ->\cf6 text\cf4 );\
\
There is two options for adding elements to list append functions adds node to end of function.  insert functions adds index to specified position. also you can access List elements by [LISTNAME]->root->[YOUR VARIABLE NAME]\
Also each lnode elements contains nextPtr so you can traverse around each individual node with [LISTNAME]->root->nextPtr->[YOUR VARIABLE NAME]\
Each nodes contains index number also using them may be useful for your code.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \cb1 \
\
as we mentioned before  all functions and nodes formed respect to your setting so enqueue functions parameters list formed with our settings #define QNODE0TYPE char* #define QNODE0NAME name. \
and warn that their position are formed with node setters number\
\
\
Queue object serves  you many attributes few of them is:\
\
its_first_queue--->count : 				Returns node count of queue\
its_first_queue--->isEmpty : 			returns True if queue is not empty, False if its empty\
its_first_queue--->head : 				Returns head of of queue\
its_first_queue--->head--->nextPtr		May be used to traverse arround queues Nodes.\
\
\
\
\
\
\
\
}